package developer.hakan.PostData;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import java.lang.reflect.Field;
 
import ajo.AbstractAjoAccess;
import de.abas.erp.db.DbContext;
 
public class DBFUpload2 extends AbstractAjoAccess{//Daten in SQL Hochladen stück für Stück
               
    private static String Pfad = "demo/test/DBF_TEST";
    private static final String DBF = "\"ht_arch.dbf\"";       //Insert Statement aus text-datei rein und den DBF Namen hier rein, und Data Ändern
    private static final String Insert = "INSERT INTO arch_ht ( komm, kd, nachname, objekt, preis, rechnung, glasbest, zustand, liefwoch, "
                               + "e_datum, zeichen, montage, li_datum, kunde, klaesnr, fixtermin, stueck, stueck_st, stueck_ol, kaempfer, aart, planterm, termalt, "
                               + "fertigung, fertig, fertig_von, fuell_best, fuell_am, griff_best, griff_am, glas_am, glasfirma, geplant, zusage, zusage_am, zusage_von, "
                               + "zusage_an, unklar, warum, klar, stop, stop_von, freigabe, storniert, storno_von, neutermin, wann_nt, sonst1, sonst2, fuell_bekw, bis, "
                               + "losnr, ladeid, tourid, ladeterm, tourterm, status, prio, tourtyp, verschoben, plandatum, planid, org_best, versand, fixkw, woche, "
                               + "jahr, storno, verzug, verzugl, aktion, zubpakete, blitz, tt_status, sonderanf, tv_grund, mass_uf, abas, flg_ueb, flg_dk, kaempfer_s, "
                               + "kipp_ol, zylind_am, kompelem, glasbock, dpi_num, gestell_nr ) VALUES "
                               + "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
                                +"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
                                +"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
                                +"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
                                +"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
                                +"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
                               //Insert aus TextDatei einfügen
                              
                DbContext ctx = null;
                @Override
                public int run(String[] args)
                {             
                               ctx = getDbContext();
                               ctx.out().println(DBF);
                              
                               this.open(ctx);
                              
                               return 0;
                }
 
                private void open(DbContext ctx) {
        String connPost = "jdbc:postgresql://192.168.6.129:5432/postgres";
        Connection conn = null;
        ctx.out().println("Programm Gestartet.");
 
        try {
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection(connPost, "postgres", "db2su");
           
            ctx.out().println("Zugriff auf Postgres.");
 
           
            // Annahme: Du hast eine Liste von Daten, die du einfügen möchtest
            List<DBFDataClass> dataList = getData(ctx);
            ctx.out().println("dataList geholt.");
 
            try (PreparedStatement preparedStatement = conn.prepareStatement(Insert)) {
              ctx.out().println("Daten Setzen in Postgres.");
                for (DBFDataClass data : dataList) {
                              ctx.out().print(".");
                    // Setze die Werte für die Placeholder (?)
                              setValues(preparedStatement, data);
 
                    // Führe das Insert-Statement aus
                    preparedStatement.executeUpdate();
                }
 
                ctx.out().println("Daten erfolgreich eingefügt.");
            }
 
        } catch (ClassNotFoundException | SQLException e) {
               ctx.out().println(e.getMessage());
               for (StackTraceElement ste : e.getStackTrace()){
                              ctx.out().println(ste.toString());
               }
        } finally {
            // Schließe die Verbindung
            try {
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
 
    private static List<DBFDataClass> getData(DbContext ctx) {
        List<DBFDataClass> dataList = new ArrayList<>();
 
        String sStmt = "SELECT * FROM " + DBF ;
                               Pfad = "jdbc:jstels:dbf:/erp/abas/" +Pfad;
 
                               try {
                                               Class.forName("jstels.jdbc.dbf.DBFDriver");
                               } catch (ClassNotFoundException e) {
                                               ctx.out().println(e.getMessage());
                               }
                              
 
                               ctx.out().println("jdbc treiber da");
 
                               try (Connection connDB = DriverManager.getConnection(Pfad);
                                                               PreparedStatement psStmt = connDB.prepareStatement(sStmt);
                                                               ResultSet rsDBF = psStmt.executeQuery()) {
 
                                               ctx.out().println("jdbc verbindung vollständig");
                                              
                                               while (rsDBF.next()) {
                                                               dataList.add(DBFDataClass.createDataObject(rsDBF));
                                               }              //dataList aus TextDatei einfügen
                               } catch (Exception e) {
                                               ctx.out().println(e.getMessage());
                               }
       
        return dataList;
    }
   
    private void setValues(PreparedStatement preparedStatement, DBFDataClass data) throws SQLException {
        try {
            Field[] fields = DBFDataClass.class.getDeclaredFields();
 
            for (int i = 0; i < fields.length; i++) {
                Field field = fields[i];
                field.setAccessible(true);
 
                Object value = field.get(data);
 
                // Handle each data type
                if (value == null) {
                    // Set the appropriate data type for NULL
                    preparedStatement.setNull(i + 1, Types.NULL);
                }else if (value instanceof String) {
                    preparedStatement.setString(i + 1, (String) value);
                } else if (value instanceof Boolean) {
                    preparedStatement.setBoolean(i + 1, (Boolean) value);
                } else if (value instanceof Timestamp) {
                    preparedStatement.setTimestamp(i + 1, (Timestamp) value);
                } else if (value instanceof Integer) {
                    preparedStatement.setInt(i + 1, (int) value);
                } else if (value instanceof Double) {
                    preparedStatement.setDouble(i + 1, (Double) value);
//                } else if (value == null){
//                          preparedStatement.setNull(i+1);
                }else {
                              ctx.out().println("i=" + i + "Klasse: " + (value != null ? value.getClass(): "null"));
                } // add more data types if needed
            }
        } catch (IllegalAccessException e) {
            throw new SQLException("Error setting values for PreparedStatement", e);
        }
    }
               
}